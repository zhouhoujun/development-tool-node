{"version":3,"sources":["task.js","task.ts"],"names":["path","require","development_tool_1","gulp_mocha_1","del","cache","ts","sourcemaps","uglify","babel","nodeDynamicTasks","name","task","config","getDist","oper","Operation","e2e","test","pipe","gulpsrc","default","option","mochaOptions","once","process","exit","tsDynamicTasks","pipes","tsProject","createProject","join","env","root","tsconfig","init","output","tsmap","gulp","dts","dest","release","deploy","js","tsBabelOption","presets","write","build","watch","Object","defineProperty","exports","value"],"mappings":"AAAA,YCEA,IAAYA,MAAIC,QAAM,QACtBC,mBAAAD,QAAuC,oBAEvCE,aAAAF,QAAkB,cAIZG,IAAMH,QAAQ,OACdI,MAAQJ,QAAQ,eAChBK,GAAKL,QAAQ,mBACbM,WAAaN,QAAQ,mBACrBO,OAASP,QAAQ,eACjBQ,MAAQR,QAAQ,cAGlBS,mBAEIC,KAAM,QACNC,KAAM,SAACC,GAAD,MAAYT,KAAIS,EAAOC,cAG7BH,KAAM,OACNI,KAAMb,mBAAAc,UAAUC,IAAMf,mBAAAc,UAAUE,KAChCC,KAHJ,SAGSC,EAASP,GACV,MAAOO,GACFD,KAAKhB,aAAAkB,QAAuBR,EAAOS,OAAQC,eAC3CC,KAAK,QAAS,WACXC,QAAQC,KAAK,KAEhBF,KAAK,MAAO,WACTC,QAAQC,YAMxBC,iBAEIhB,KAAM,aACNiB,MAFJ,SAEUf,GACF,GAAIS,GAAyBT,EAAOS,OAEhCO,EAAYvB,GAAGwB,cAAc9B,KAAK+B,KAAKlB,EAAOmB,IAAIC,KAAMX,EAAOY,UAAY,mBAC/E,QACI,WAAA,MAAM7B,OAAM,eACZE,WAAW4B,KACXN,IAGRO,QACI,SAACC,EAAOxB,EAAQyB,GAAhB,MAAyBD,GAAME,IAAIpB,KAAKmB,EAAKE,KAAK3B,EAAOC,aACzD,SAACuB,EAAOxB,EAAQyB,GACZ,GAAIhB,GAAyBT,EAAOS,MACpC,OAAIT,GAAOE,OAASb,mBAAAc,UAAUyB,SAAW5B,EAAOE,OAASb,mBAAAc,UAAU0B,OACxDL,EAAMM,GACRxB,KAAKV,MAAMa,EAAOsB,gBACfC,SAAU,aAEb1B,KAAKX,UACLW,KAAKZ,WAAWuC,MAAM,iBACtB3B,KAAKmB,EAAKE,KAAK3B,EAAOC,YAEpBuB,EAAMM,GACRxB,KAAKZ,WAAWuC,MAAM,iBACtB3B,KAAKmB,EAAKE,KAAK3B,EAAOC,gBAMvCH,KAAM,WACNI,KAAMb,mBAAAc,UAAU+B,MAAQ7C,mBAAAc,UAAUC,IAAMf,mBAAAc,UAAUE,KAClD8B,OAAQ,eAKhBC,QAAAC,eAAAC,QAAA,cAAAC,OAAA,IDTAD,QAAQ9B,SCUJM,eAAgBA,eAChBjB,iBAAkBA","file":"../task.js","sourcesContent":["\"use strict\";\nconst path = require('path');\nconst development_tool_1 = require('development-tool');\nconst gulp_mocha_1 = require('gulp-mocha');\nconst del = require('del');\nconst cache = require('gulp-cached');\nconst ts = require('gulp-typescript');\nconst sourcemaps = require('gulp-sourcemaps');\nconst uglify = require('gulp-uglify');\nconst babel = require('gulp-babel');\nlet nodeDynamicTasks = [\n    {\n        name: 'clean',\n        task: (config) => del(config.getDist())\n    },\n    {\n        name: 'test',\n        oper: development_tool_1.Operation.e2e | development_tool_1.Operation.test,\n        pipe(gulpsrc, config) {\n            return gulpsrc\n                .pipe(gulp_mocha_1.default(config.option.mochaOptions))\n                .once('error', () => {\n                process.exit(1);\n            })\n                .once('end', () => {\n                process.exit();\n            });\n        }\n    }\n];\nlet tsDynamicTasks = [\n    {\n        name: 'ts-compile',\n        pipes(config) {\n            let option = config.option;\n            let tsProject = ts.createProject(path.join(config.env.root, option.tsconfig || './tsconfig.json'));\n            return [\n                    () => cache('typescript'),\n                sourcemaps.init,\n                tsProject\n            ];\n        },\n        output: [\n                (tsmap, config, gulp) => tsmap.dts.pipe(gulp.dest(config.getDist())),\n                (tsmap, config, gulp) => {\n                let option = config.option;\n                if (config.oper === development_tool_1.Operation.release || config.oper === development_tool_1.Operation.deploy) {\n                    return tsmap.js\n                        .pipe(babel(option.tsBabelOption || {\n                        presets: ['es2015']\n                    }))\n                        .pipe(uglify())\n                        .pipe(sourcemaps.write('./sourcemaps'))\n                        .pipe(gulp.dest(config.getDist()));\n                }\n                else {\n                    return tsmap.js\n                        .pipe(sourcemaps.write('./sourcemaps'))\n                        .pipe(gulp.dest(config.getDist()));\n                }\n            }\n        ]\n    },\n    {\n        name: 'ts-watch',\n        oper: development_tool_1.Operation.build | development_tool_1.Operation.e2e | development_tool_1.Operation.test,\n        watch: ['ts-compile']\n    }\n];\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = {\n    tsDynamicTasks: tsDynamicTasks,\n    nodeDynamicTasks: nodeDynamicTasks\n};\n","/// <reference types=\"mocha\"/>\r\nimport * as _ from 'lodash';\r\nimport * as path from 'path';\r\nimport { DynamicTask, Operation } from 'development-tool';\r\n// import * as chalk from 'chalk';\r\nimport mocha from 'gulp-mocha';\r\nimport { NodeTaskOption } from './NodeTaskOption';\r\n\r\n\r\nconst del = require('del');\r\nconst cache = require('gulp-cached');\r\nconst ts = require('gulp-typescript');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst uglify = require('gulp-uglify');\r\nconst babel = require('gulp-babel');\r\n\r\n// import * as chalk from 'chalk';\r\nlet nodeDynamicTasks: DynamicTask[] = [\r\n    {\r\n        name: 'clean',\r\n        task: (config) => del(config.getDist())\r\n    },\r\n    {\r\n        name: 'test',\r\n        oper: Operation.e2e | Operation.test,\r\n        pipe(gulpsrc, config) {\r\n            return gulpsrc\r\n                .pipe(mocha((<NodeTaskOption>config.option).mochaOptions))\r\n                .once('error', () => {\r\n                    process.exit(1);\r\n                })\r\n                .once('end', () => {\r\n                    process.exit();\r\n                });\r\n        }\r\n    }\r\n];\r\n\r\nlet tsDynamicTasks = <DynamicTask[]>[\r\n    {\r\n        name: 'ts-compile',\r\n        pipes(config) {\r\n            let option = <NodeTaskOption>config.option;\r\n            // console.log(config);\r\n            let tsProject = ts.createProject(path.join(config.env.root, option.tsconfig || './tsconfig.json'));\r\n            return [\r\n                () => cache('typescript'),\r\n                sourcemaps.init,\r\n                tsProject\r\n            ]\r\n        },\r\n        output: [\r\n            (tsmap, config, gulp) => tsmap.dts.pipe(gulp.dest(config.getDist())),\r\n            (tsmap, config, gulp) => {\r\n                let option = <NodeTaskOption>config.option;\r\n                if (config.oper === Operation.release || config.oper === Operation.deploy) {\r\n                    return tsmap.js\r\n                        .pipe(babel(option.tsBabelOption || {\r\n                            presets: ['es2015']\r\n                        }))\r\n                        .pipe(uglify())\r\n                        .pipe(sourcemaps.write('./sourcemaps'))\r\n                        .pipe(gulp.dest(config.getDist()));\r\n                } else {\r\n                    return tsmap.js\r\n                        .pipe(sourcemaps.write('./sourcemaps'))\r\n                        .pipe(gulp.dest(config.getDist()));\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: 'ts-watch',\r\n        oper: Operation.build | Operation.e2e | Operation.test,\r\n        watch: ['ts-compile']\r\n    }\r\n];\r\n\r\n\r\nexport default {\r\n    tsDynamicTasks: tsDynamicTasks,\r\n    nodeDynamicTasks: nodeDynamicTasks\r\n}\r\n"]}