{"version":3,"sources":["task.ts"],"names":[],"mappings":";AACA,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,mCAAoG,kBAAkB,CAAC,CAAA;AACvH,MAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AA4D/B;kBAA4B;IACxB,gBAAgB,CAAC,IAAe,EAAE,MAAkB,EAAE,GAAc;QAChE,MAAM,CAAC;YACH,IAAI,EAAE,IAAI;YACV,GAAG,EAAE,GAAG;YACR,MAAM,EAAE,MAAM;YACd,QAAQ,CAAC,SAAe;gBACpB,IAAI,KAAK,GAAU,CAAC,OAAO,CAAC,CAAC;gBAC7B,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACX,KAAK,4BAAS,CAAC,KAAK;wBAChB,KAAK,GAAG,CAAC,OAAO,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC;wBACjD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACZ,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;wBAC1B,CAAC;wBACD,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;4BACZ,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBACxB,CAAC;wBACD,KAAK,CAAC;oBACV,KAAK,4BAAS,CAAC,IAAI,CAAC;oBACpB,KAAK,4BAAS,CAAC,OAAO;wBAClB,KAAK,GAAG,CAAC,OAAO,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC;wBACjD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACZ,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;wBAC1B,CAAC;wBACD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBACnB,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;4BACZ,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBACxB,CAAC;wBACD,KAAK,CAAC;oBACV,KAAK,4BAAS,CAAC,GAAG;wBACd,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAA;wBACnD,KAAK,CAAC;oBAGV,KAAK,4BAAS,CAAC,MAAM;wBACjB,KAAK,GAAG,CAAC,OAAO,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC;wBACjD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;4BACZ,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;wBAC1B,CAAC;wBACD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBACnB,KAAK,CAAC;gBACd,CAAC;gBACD,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;SACJ,CAAA;IACL,CAAC;IAED,gBAAgB,CAAC,MAAkB;QAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACvB,IAAI,QAAQ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC,CAAC;QACvD,EAAE,CAAC,CAAC,IAAI,IAAI,4BAAS,CAAC,IAAI,CAAC,CAAC,CAAC;YACzB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;QACxD,CAAC;QAWD,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC3C,CAAC;CACJ,CAAC","file":"../task.js","sourcesContent":["/// <reference types=\"mocha\"/>\r\nimport * as path from 'path';\r\nimport { WatchEvent } from 'gulp';\r\nimport { Asserts, Src, Task, IMap, TaskConfig, EnvOption, Operation, TaskOption, ITaskDefine } from 'development-tool';\r\nimport * as chalk from 'chalk';\r\n\r\n\r\nexport interface NodeBuildOption extends TaskOption {\r\n    /**\r\n     * test code src to run test.\r\n     * \r\n     * @type {(string | string[])}\r\n     * @memberOf NodeTestConfig\r\n     */\r\n    test?: Src;\r\n    /**\r\n     * tsconfig for typescript\r\n     * \r\n     * @type {string}\r\n     * @memberOf NodeBuildOption\r\n     */\r\n    tsconfig?: string;\r\n    /**\r\n     * typescript src.\r\n     * \r\n     * @type {Src}\r\n     * @memberOf NodeBuildOption\r\n     */\r\n    ts?: Src;\r\n    /**\r\n     * watch typescript file changed.\r\n     * \r\n     * @param {TaskConfig} config\r\n     * @param {WatchEvent} event\r\n     * \r\n     * @memberOf NodeBuildOption\r\n     */\r\n    tsWatchChanged?(config: TaskConfig, event: WatchEvent): void;\r\n    /**\r\n     * mocha test config.\r\n     * \r\n     * @type {MochaSetupOptions}\r\n     * @memberOf NodeBuildOption\r\n     */\r\n    mochaOptions?: MochaSetupOptions;\r\n    /**\r\n     * static asserts config to copy to dist.\r\n     * \r\n     * @type {string[]}\r\n     * @memberOf NodeBuildOption\r\n     */\r\n    asserts?: IMap<Src | Asserts>;\r\n    /**\r\n     * watch assert file changed.\r\n     * \r\n     * @param {string} assert\r\n     * @param {TaskConfig} config\r\n     * @param {WatchEvent} event\r\n     * \r\n     * @memberOf NodeBuildOption\r\n     */\r\n    assertWatchChanged?(assert: string, config: TaskConfig, event: WatchEvent): void;\r\n}\r\n\r\nexport default <ITaskDefine>{\r\n    moduleTaskConfig(oper: Operation, option: TaskOption, env: EnvOption): TaskConfig {\r\n        return {\r\n            oper: oper,\r\n            env: env,\r\n            option: option,\r\n            runTasks(subgpTask?: Src): Src[] {\r\n                let tasks: Src[] = ['clean'];\r\n                switch (oper) {\r\n                    case Operation.build:\r\n                        tasks = ['clean', ['copy-asserts', 'tscompile']];\r\n                        if (subgpTask) {\r\n                            tasks.push(subgpTask);\r\n                        }\r\n                        if (env.watch) {\r\n                            tasks.push('watch');\r\n                        }\r\n                        break;\r\n                    case Operation.test:\r\n                    case Operation.release:\r\n                        tasks = ['clean', ['copy-asserts', 'tscompile']];\r\n                        if (subgpTask) {\r\n                            tasks.push(subgpTask);\r\n                        }\r\n                        tasks.push('test');\r\n                        if (env.watch) {\r\n                            tasks.push('watch');\r\n                        }\r\n                        break;\r\n                    case Operation.e2e:\r\n                        console.log(chalk.red('can not support e2e test.'))\r\n                        break;\r\n                    // case Operation.release:\r\n                    //     break;\r\n                    case Operation.deploy:\r\n                        tasks = ['clean', ['copy-asserts', 'tscompile']];\r\n                        if (subgpTask) {\r\n                            tasks.push(subgpTask);\r\n                        }\r\n                        tasks.push('test');\r\n                        break;\r\n                }\r\n                return tasks;\r\n            }\r\n        }\r\n    },\r\n\r\n    moduleTaskLoader(config: TaskConfig): Promise<Task[]> {\r\n        let oper = config.oper;\r\n        let taskDirs = [path.join(__dirname, './tasks/build')];\r\n        if (oper >= Operation.test) {\r\n            taskDirs.push(path.join(__dirname, './tasks/test'));\r\n        }\r\n        // if (oper >= Operation.e2e) {\r\n        //     taskDirs.push(path.join(__dirname, './tasks/e2e'));\r\n        // }\r\n        // if (oper >= Operation.release) {\r\n        //     taskDirs.push(path.join(__dirname, './tasks/release'));\r\n        // }\r\n        // if (oper >= Operation.deploy) {\r\n        //     taskDirs.push(path.join(__dirname, './tasks/deploy'));\r\n        // }\r\n        // console.log(chalk.grey('load task from dirs:'), taskDirs);\r\n        return config.findTasksInDir(taskDirs);\r\n    }\r\n};\r\n"]}