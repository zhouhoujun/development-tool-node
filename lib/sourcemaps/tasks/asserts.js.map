{"version":3,"sources":["tasks/asserts.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,MAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,mCAAoE,kBAAkB,CAAC,CAAA;AAKvF,MAAM,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,MAAM,EAAE,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACtC,MAAM,UAAU,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC9C,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACtC,MAAM,KAAK,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;AAMpC;IACI,KAAK;QACD,MAAM,CAAiB;YACnB;gBACI,IAAI,EAAE,YAAY;gBAClB,KAAK,EAAE;oBACH,UAAM,KAAK,CAAC,YAAY,CAAC;oBACzB,UAAU,CAAC,IAAI;oBACf,KAAC,MAAM;wBACH,IAAI,MAAM,GAAoB,MAAM,CAAC,MAAM,CAAC;wBAE5C,IAAI,SAAS,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE,EAAE,MAAM,CAAC,QAAQ,IAAI,iBAAiB,CAAC,CAAC,CAAC;wBACzG,MAAM,CAAC,SAAS,EAAE,CAAC;oBACvB,CAAC;iBACJ;gBACD,MAAM,EAAE;oBACJ,KAAC,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,KAAK,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC1E,KAAC,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI;wBACpB,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,4BAAS,CAAC,OAAO,IAAI,MAAM,CAAC,IAAI,KAAK,4BAAS,CAAC,MAAM,CAAC,CAAC,CAAC;4BACxE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;iCAC/C,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;iCACrD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC7C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC/F,CAAC;oBACL,CAAC;iBACJ;aACJ;YACD;gBACI,IAAI,EAAE,UAAU;gBAChB,IAAI,EAAE,4BAAS,CAAC,KAAK,GAAG,4BAAS,CAAC,GAAG,GAAG,4BAAS,CAAC,IAAI;gBACtD,UAAU,EAAE,CAAC,YAAY,CAAC;aAC7B;SACJ,CAAC;IACN,CAAC;AACL,CAAC;AAtCD;IAAC,8BAAW,CAAC;QACT,KAAK,EAAE,IAAI;KACd,CAAC;;WAAA;AACW,eAAO,UAmCnB,CAAA","file":"../../tasks/asserts.js","sourcesContent":["/// <reference types=\"mocha\"/>\r\nimport * as _ from 'lodash';\r\nimport * as path from 'path';\r\nimport { IDynamicTask, Operation, IDynamicTasks, dynamicTask } from 'development-core';\r\n// import * as chalk from 'chalk';\r\nimport { INodeTaskOption } from '../NodeTaskOption';\r\n\r\n\r\nconst cache = require('gulp-cached');\r\nconst ts = require('gulp-typescript');\r\nconst sourcemaps = require('gulp-sourcemaps');\r\nconst uglify = require('gulp-uglify');\r\nconst babel = require('gulp-babel');\r\n\r\n\r\n@dynamicTask({\r\n    group: 'ts'\r\n})\r\nexport class TsTasks implements IDynamicTasks {\r\n    tasks() {\r\n        return <IDynamicTask[]>[\r\n            {\r\n                name: 'ts-compile',\r\n                pipes: [\r\n                    () => cache('typescript'),\r\n                    sourcemaps.init,\r\n                    (config) => {\r\n                        let option = <INodeTaskOption>config.option;\r\n                        // console.log(config);\r\n                        let tsProject = ts.createProject(path.join(config.env.root || '', option.tsconfig || './tsconfig.json'));\r\n                        return tsProject();\r\n                    }\r\n                ],\r\n                output: [\r\n                    (tsmap, config, dt, gulp) => tsmap.dts.pipe(gulp.dest(config.getDist(dt))),\r\n                    (tsmap, config, dt, gulp) => {\r\n                        if (config.oper === Operation.release || config.oper === Operation.deploy) {\r\n                            return tsmap.js.pipe(babel({ presets: ['es2015'] }))\r\n                                .pipe(uglify()).pipe(sourcemaps.write('./sourcemaps'))\r\n                                .pipe(gulp.dest(config.getDist(dt)));\r\n                        } else {\r\n                            return tsmap.js.pipe(sourcemaps.write('./sourcemaps')).pipe(gulp.dest(config.getDist(dt)));\r\n                        }\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                name: 'ts-watch',\r\n                oper: Operation.build | Operation.e2e | Operation.test,\r\n                watchTasks: ['ts-compile']\r\n            }\r\n        ];\r\n    }\r\n}\r\n"]}