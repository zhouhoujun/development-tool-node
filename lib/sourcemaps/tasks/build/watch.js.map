{"version":3,"sources":["tasks/build/watch.ts"],"names":[],"mappings":";AACA,MAAY,CAAC,WAAM,QAAQ,CAAC,CAAA;AAK5B,iBAAS,CAAC,IAAU,EAAE,MAAkB;IACpC,IAAI,MAAM,GAAqC,MAAM,CAAC,MAAM,CAAC;IAC7D,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;QAGf,IAAI,QAAQ,GAA+B,CAAC,WAAW,CAAC,CAAC;QACzD,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;YAClB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1B,CAAC;QACD,QAAQ,CAAC,IAAI,CAAC,CAAgB,KAAiB;YAC3C,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,UAAU,CAAC,EAAE,QAAQ,CAAC,CAAC;QAG7D,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YACjB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC5B,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC7B,IAAI,GAAG,GAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;gBACvE,IAAI,CAAC,KAAK,CAAC,GAAG,EACV;oBACI,OAAO,GAAG,CAAC;oBACX,KAAC,KAAiB;wBACd,MAAM,CAAC,kBAAkB,IAAI,MAAM,CAAC,kBAAkB,CAAC,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;oBAC7E,CAAC;iBACJ,CAAC,CAAC;YACX,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAA","file":"../../../tasks/build/watch.js","sourcesContent":["import { Gulp, WatchCallback, WatchEvent } from 'gulp';\r\nimport * as _ from 'lodash';\r\nimport { NodeBuildOption } from '../../task';\r\nimport { Src, TaskConfig } from 'development-tool';\r\n// const browserSync = require('browser-sync');\r\n\r\nexport = (gulp: Gulp, config: TaskConfig) => {\r\n    let option: NodeBuildOption = <NodeBuildOption>config.option;\r\n    gulp.task('watch', () => {\r\n\r\n        // watch ts.\r\n        let watchTsk: (string | WatchCallback)[] = ['tscompile'];\r\n        if (config.env.test) {\r\n            watchTsk.push('test');\r\n        }\r\n        watchTsk.push(<WatchCallback>(event: WatchEvent) => {\r\n            option.tsWatchChanged && option.tsWatchChanged(config, event);\r\n        });\r\n        gulp.watch(option.ts || (option.src + '/**/*.ts'), watchTsk);\r\n\r\n        // watch asserts\r\n        if (option.asserts) {\r\n            _.each(_.keys(option.asserts), f => {\r\n                let asst = option.asserts[f];\r\n                let src: Src = (_.isArray(asst) || _.isString(asst)) ? asst : asst.src;\r\n                gulp.watch(src,\r\n                    [\r\n                        'copy-' + f,\r\n                        (event: WatchEvent) => {\r\n                            option.assertWatchChanged && option.assertWatchChanged(f, config, event);\r\n                        }\r\n                    ]);\r\n            });\r\n        }\r\n    });\r\n}\r\n"]}