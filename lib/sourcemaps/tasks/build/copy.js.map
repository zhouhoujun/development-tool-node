{"version":3,"sources":["tasks/build/copy.ts"],"names":[],"mappings":";AACA,MAAY,CAAC,WAAM,QAAQ,CAAC,CAAA;AAG5B,MAAM,KAAK,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,MAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAE/B,iBAAS,CAAC,IAAU,EAAE,MAAkB;IACpC,IAAI,MAAM,GAAqC,MAAM,CAAC,MAAM,CAAC;IAC7D,IAAI,KAAK,GAAG,EAAE,CAAC;IACf,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QAEjB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC;YAC5B,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC;YACX,CAAC;YAED,IAAI,IAAI,GAAW,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,CAAC;YAEzF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC;YACX,CAAC;YAED,IAAI,GAAG,GAAG,OAAO,GAAG,CAAC,CAAC;YACtB,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAChB,IAAI,GAAG,GAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC;YAEvE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;gBACX,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;qBACR,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;qBAC1B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAID,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;QACtB,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC3C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,qCAAqC,CAAC,CAAC,CAAC;YACjE,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAA","file":"../../../tasks/build/copy.js","sourcesContent":["import { Gulp } from 'gulp';\r\nimport * as _ from 'lodash';\r\nimport { NodeBuildOption } from '../../task';\r\nimport { Src, TaskConfig } from 'development-tool';\r\nconst cache = require('gulp-cached');\r\nimport * as chalk from 'chalk';\r\n\r\nexport = (gulp: Gulp, config: TaskConfig) => {\r\n    let option: NodeBuildOption = <NodeBuildOption>config.option;\r\n    let tasks = [];\r\n    if (option.asserts) {\r\n\r\n        _.each(_.keys(option.asserts), f => {\r\n            let asst = option.asserts[f];\r\n            if (!asst) {\r\n                return;\r\n            }\r\n\r\n            let dist: string = config.getDist((_.isArray(asst) || _.isString(asst)) ? option : asst);\r\n\r\n            if (!dist) {\r\n                return;\r\n            }\r\n\r\n            let tsk = 'copy-' + f;\r\n            tasks.push(tsk);\r\n            let src: Src = (_.isArray(asst) || _.isString(asst)) ? asst : asst.src;\r\n\r\n            gulp.task(tsk, () => {\r\n                gulp.src(src)\r\n                    .pipe(cache('assets-' + f))\r\n                    .pipe(gulp.dest(dist));\r\n            });\r\n        });\r\n    }\r\n\r\n    // console.log('register copy-asserts task by gulp', tasks);\r\n\r\n    gulp.task('copy-asserts', () => {\r\n        if (tasks.length > 0) {\r\n            return config.runSequence(gulp, tasks);\r\n        } else {\r\n            console.log(chalk.yellow('has not configed asserts in option.'));\r\n            return Promise.resolve();\r\n        }\r\n    });\r\n}\r\n"]}