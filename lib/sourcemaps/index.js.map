{"version":3,"sources":["index.js","index.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","_typeof","decorate","i","defineProperty","__metadata","k","v","metadata","_","require","development_core_1","asserts","nodeDefaultTask_1","Define","_classCallCheck","this","_createClass","value","oper","option","env","extend","ts","loader","config","findTasks","group","NodeDynamicTasks","taskdefine","exports"],"mappings":"AAAA,+kBACIA,WAA0C,SAAUC,EAAYC,EAAQC,EAAKC,GAC7E,GAA2HC,GAAvHC,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOM,OAAOC,yBAAyBT,EAAQC,GAAOC,CACrH,IAAuB,YAAnB,mBAAOQ,SAAP,YAAAC,QAAOD,WAAoD,kBAArBA,SAAQE,SAAyBL,EAAIG,QAAQE,SAASb,EAAYC,EAAQC,EAAKC,OACpH,KAAK,GAAIW,GAAId,EAAWO,OAAS,EAAGO,GAAK,EAAGA,KAASV,EAAIJ,EAAWc,MAAIN,GAAKH,EAAI,EAAID,EAAEI,GAAKH,EAAI,EAAID,EAAEH,EAAQC,EAAKM,GAAKJ,EAAEH,EAAQC,KAASM,EAChJ,OAAOH,GAAI,GAAKG,GAAKC,OAAOM,eAAed,EAAQC,EAAKM,GAAIA,GAE5DQ,WAA0C,SAAUC,EAAGC,GANvDnB,GAAc,YAAdA,mBAAAA,SAAAA,YAAAA,QAAAA,WAAoDC,kBAAzBD,SAAeoB,SAAsBlB,MAAQC,SAA9BiB,SAAyCF,EAAAC,ICA3EE,EAACC,QAAM,UACnBC,mBAAAD,QAA2G,oBAI/FE,QAAOF,QAAM,mBAEzBG,kBAAAH,QAAiC,2BAGjCI,OAAAA,WAAA,QAAAA,KAAAC,gBAAAC,KAAAF,GAAA,MAAAG,cAAAH,IAAAvB,IAAA,aAAA2B,MAAA,SACeC,EAAiBC,EAAqBC,GAS7C,MAPAD,GAAOR,QAAUH,EAAEa,QACfC,IACIC,OAAQ,SAACC,GAAD,MAAyBA,GAAOC,UAAUd,SAAWe,MAAO,UAEzEP,EAAOR,UAINO,KAAMA,EACNE,IAAKA,EACLD,OAAQA,MAbpB7B,IAAA,YAAA2B,MAAA,SAiBcO,GACN,MAAOA,GAAOC,UAAUb,kBAAAe,sBAlBhCd,IADAA,QAAA1B,YAACuB,mBAAAkB,WAMeL,WAAAA,yBAAQV,QALXgB,QAAAhB,OAAMA","file":"../index.js","sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nconst _ = require('lodash');\nconst development_core_1 = require('development-core');\nconst asserts = require('./tasks/asserts');\nconst nodeDefaultTask_1 = require('./tasks/nodeDefaultTask');\nlet Define = class Define {\n    loadConfig(oper, option, env) {\n        option.asserts = _.extend({\n            ts: {\n                loader: (config) => config.findTasks(asserts, { group: 'ts' })\n            }\n        }, option.asserts);\n        return {\n            oper: oper,\n            env: env,\n            option: option\n        };\n    }\n    loadTasks(config) {\n        return config.findTasks(nodeDefaultTask_1.NodeDynamicTasks);\n    }\n};\nDefine = __decorate([\n    development_core_1.taskdefine, \n    __metadata('design:paramtypes', [])\n], Define);\nexports.Define = Define;\n","/// <reference types=\"mocha\"/>\r\nimport * as _ from 'lodash';\r\nimport { ITask, findTasks, ITaskConfig, IEnvOption, Operation, ITaskOption, ITaskDefine, taskdefine } from 'development-core';\r\n\r\nexport * from './NodeTaskOption';\r\n\r\nimport * as asserts from './tasks/asserts';\r\n\r\nimport { NodeDynamicTasks } from './tasks/nodeDefaultTask';\r\n\r\n@taskdefine\r\nexport class Define implements ITaskDefine {\r\n    loadConfig(oper: Operation, option: ITaskOption, env: IEnvOption): ITaskConfig {\r\n        // register default asserts.\r\n        option.asserts = _.extend({\r\n            ts: {\r\n                loader: (config: ITaskConfig) => config.findTasks(asserts, { group: 'ts' })\r\n            }\r\n        }, option.asserts);\r\n\r\n\r\n        return <ITaskConfig>{\r\n            oper: oper,\r\n            env: env,\r\n            option: option\r\n        }\r\n    }\r\n\r\n    loadTasks(config: ITaskConfig): Promise<ITask[]> {\r\n        return config.findTasks(NodeDynamicTasks)\r\n    }\r\n}\r\n"]}