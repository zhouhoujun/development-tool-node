{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;;;;AAAA,0BAA4B;AAC5B,qDAAsI;AAKtI,2DAA8E;AAG9E;IAAA;IA6CA,CAAC;IA3CG,sCAAU,GAAV,UAAW,MAAqB,EAAE,GAAe;QAC7C,4BAA4B;QAC5B,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC;YACtB,GAAG,EAAE,4BAAS,CAAC,OAAO;YACtB,IAAI,EAAE,4BAAS,CAAC,OAAO;YACvB,GAAG,EAAE,4BAAS,CAAC,OAAO;YACtB,GAAG,EAAE,4BAAS,CAAC,OAAO;YACtB,GAAG,EAAE,4BAAS,CAAC,OAAO;YACtB,GAAG,EAAE,4BAAS,CAAC,OAAO;YACtB,GAAG,EAAE,4BAAS,CAAC,OAAO;YACtB,GAAG,EAAE,4BAAS,CAAC,OAAO;YACtB,IAAI,EAAE,4BAAS,CAAC,OAAO;YACvB,GAAG,EAAE,4BAAS,CAAC,OAAO;YACtB,EAAE,EAAE,4BAAS,CAAC,OAAO,GAAG,4BAAS,CAAC,SAAS;YAC3C,EAAE,EAAE,uBAAuB;SAC9B,EAAE,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QAGzB,MAAM,CAAc;YAChB,MAAM,EAAE,MAAM;YACd,GAAG,EAAE,GAAG;SACX,CAAC;IACN,CAAC;IAED,sCAAU,GAAV,UAAW,GAAiB;QACxB,IAAI,UAAU,GAAG,GAAG,CAAC,MAAyB,CAAA;QAC9C,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC;QACX,CAAC;QACD,GAAG,CAAC,GAAG,CAAc;YACjB,MAAM,EAAiB;gBACnB,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,UAAU,CAAC,SAAS,IAAI,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,GAAG,KAAK,EAAT,CAAS,CAAC;gBACnD,MAAM,EAAE,UAAC,GAAG;oBACR,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,kCAAgB,CAAC,CAAC;gBAC3C,CAAC;aACJ;SACJ,CAAC,CAAC;IACP,CAAC;IAED,iCAAK,GAAL,UAAM,OAAqB;QACvB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,mCAAiB,CAAC,CAAC;IAChD,CAAC;IA5CQ,iBAAiB;QAD7B,6BAAU,EAAE;OACA,iBAAiB,CA6C7B;IAAD,wBAAC;CA7CD,AA6CC,IAAA;AA7CY,8CAAiB","file":"../index.js","sourcesContent":["import * as _ from 'lodash';\r\nimport { ITask, IAssertOption, IEnvOption, IContextDefine, ITaskContext, ITaskConfig, taskdefine, Operation } from 'development-core';\r\n\r\nimport { INodeTaskOption } from './NodeTaskOption';\r\nexport * from './NodeTaskOption';\r\n\r\nimport { CleanDynamicTasks, TestDynamicTasks } from './tasks/nodeDefaultTask';\r\n\r\n@taskdefine()\r\nexport class NodeContextDefine implements IContextDefine {\r\n\r\n    loadConfig(option: IAssertOption, env: IEnvOption): ITaskConfig {\r\n        // register default asserts.\r\n        option.asserts = _.extend({\r\n            css: Operation.default,\r\n            jpeg: Operation.default,\r\n            jpg: Operation.default,\r\n            gif: Operation.default,\r\n            png: Operation.default,\r\n            ioc: Operation.default,\r\n            svg: Operation.default,\r\n            ttf: Operation.default,\r\n            woff: Operation.default,\r\n            eot: Operation.default,\r\n            js: Operation.default | Operation.autoWatch,\r\n            ts: 'development-assert-ts'\r\n        }, option.asserts || {});\r\n\r\n\r\n        return <ITaskConfig>{\r\n            option: option,\r\n            env: env\r\n        };\r\n    }\r\n\r\n    setContext(ctx: ITaskContext) {\r\n        let nodeOption = ctx.option as INodeTaskOption\r\n        if (nodeOption.test === false) {\r\n            return;\r\n        }\r\n        ctx.add(<ITaskConfig>{\r\n            option: <IAssertOption>{\r\n                name: 'test',\r\n                order: nodeOption.testOrder || (total => 2 / total),\r\n                loader: (ctx) => {\r\n                    return ctx.findTasks(TestDynamicTasks);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    tasks(context: ITaskContext): Promise<ITask[]> {\r\n        return context.findTasks(CleanDynamicTasks);\r\n    }\r\n}\r\n"]}