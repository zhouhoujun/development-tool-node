{"version":3,"sources":["index.js","index.ts"],"names":["_","require","task_1","Object","defineProperty","exports","value","moduleTaskConfig","oper","option","env","asserts","extend","ts","loader","default","tsDynamicTasks","runTasks","subGroupTask","tasks","assertTasks","splice","moduleTaskLoader","config","Promise","resolve","dynamicTasks","nodeDynamicTasks"],"mappings":"AAAA,YCCA,IAAYA,GAACC,QAAM,UAGnBC,OAAAD,QAAkB,SAIlBE,QAAAC,eAAAC,QAAA,cAAAC,OAAA,IAAAH,QAAAC,SACIG,iBADwB,SACPC,EAAiBC,EAAoBC,GAOlD,MALAD,GAAOE,QAAUX,EAAEY,QACfC,IAAMC,OAAQZ,OAAAa,QAAMC,iBACrBP,EAAOE,UAINH,KAAMA,EACNE,IAAKA,EACLD,OAAQA,EACRQ,SAJe,SAINC,EAAoBC,EAAeC,GAGxC,MAFAA,IAAeD,EAAME,OAAO,EAAG,EAAGD,GAClCF,GAAgBC,EAAME,OAAO,EAAG,EAAGH,GAC5BC,KAKnBG,iBApBwB,SAoBPC,GACb,MAAOC,SAAQC,QAAQF,EAAOG,aAAaxB,OAAAa,QAAMY","file":"../index.js","sourcesContent":["\"use strict\";\nconst _ = require('lodash');\nconst task_1 = require('./task');\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = {\n    moduleTaskConfig(oper, option, env) {\n        option.asserts = _.extend({\n            ts: { loader: task_1.default.tsDynamicTasks }\n        }, option.asserts);\n        return {\n            oper: oper,\n            env: env,\n            option: option,\n            runTasks(subGroupTask, tasks, assertTasks) {\n                assertTasks && tasks.splice(1, 0, assertTasks);\n                subGroupTask && tasks.splice(1, 0, subGroupTask);\n                return tasks;\n            }\n        };\n    },\n    moduleTaskLoader(config) {\n        return Promise.resolve(config.dynamicTasks(task_1.default.nodeDynamicTasks));\n    }\n};\n","/// <reference types=\"mocha\"/>\r\nimport * as _ from 'lodash';\r\nimport { Src, Task, TaskConfig, EnvOption, Operation, TaskOption, ITaskDefine } from 'development-tool';\r\n\r\nimport tasks from './task';\r\n\r\nexport * from './NodeTaskOption';\r\n\r\nexport default <ITaskDefine>{\r\n    moduleTaskConfig(oper: Operation, option: TaskOption, env: EnvOption): TaskConfig {\r\n        // register default asserts.\r\n        option.asserts = _.extend({\r\n            ts: { loader: tasks.tsDynamicTasks }\r\n        }, option.asserts);\r\n\r\n\r\n        return <TaskConfig>{\r\n            oper: oper,\r\n            env: env,\r\n            option: option,\r\n            runTasks(subGroupTask?: Src, tasks?: Src[], assertTasks?: Src): Src[] {\r\n                assertTasks && tasks.splice(1, 0, assertTasks);\r\n                subGroupTask && tasks.splice(1, 0, subGroupTask);\r\n                return tasks;\r\n            }\r\n        }\r\n    },\r\n\r\n    moduleTaskLoader(config: TaskConfig): Promise<Task[]> {\r\n        return Promise.resolve(config.dynamicTasks(tasks.nodeDynamicTasks));\r\n    }\r\n}\r\n"]}